name: PolyNet # name of your model
framework:
  name: PyTorch # framework for the model
  version: 1.8.1 # framework version constraint
version: 1.0 # version information in semantic version format
description: >
  The pre-trained model expects input in mini-batches of 3-channel RGB images of shape (3 x H x W), where H and W are expected to be 331. The images have to be loaded in to a range of [0, 1] and then normalized using mean = [0.485, 0.456, 0.406] and std = [0.229, 0.224, 0.225].
references: # references to papers / websites / etc.. describing the model
  - https://github.com/Cadene/pretrained-models.pytorch#reproducing-results
  - https://github.com/Cadene/pretrained-models.pytorch/blob/master/pretrainedmodels/models/polynet.py
# license of the model
license: BSD 3-Clause License
# inputs to the model
modality: general
inputs:
  - type: image
    # description of the first input
    description: the input image
    parameters: # type parameters
      element_type: float32
      input_layer: 0
      layout: CHW
      color_mode: RGB
      dimensions: [3, 331, 331]
      mean: [123.675, 116.280, 103.530]
      scale: [58.395, 57.120, 57.375]
outputs:
  - type: classification
    description: the probability
    parameters:
      element_type: float32
model: # specifies model graph and weights resources
  is_archive:
    false # if set, then the base_url is a url to an archive
    # the graph_path and weights_path then denote the
    # file names of the graph and weights within the archive
  graph_path: https://s3.amazonaws.com/store.carml.org/models/pytorch/polynet-imagenet.pt
  graph_checksum: d17f09bddd7f166895c0bfdb293c3622
  features_path: http://s3.amazonaws.com/store.carml.org/synsets/imagenet/synset.txt
  features_checksum: 4d234b5833aca44928065a180db3016a
preprocess: |
  from torchvision import transforms
  from PIL import Image
  preprocessor = transforms.Compose([
    transforms.Resize(331),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224. 0.225])
  ])
  def preprocess(ctx, data):
    img = Image.open(dataset[int(data)]).convert('RGB')
    return preprocessor(img).numpy()
postprocess: |
  from scipy.special import softmax
  def postprocess(ctx, data):
    return softmax(data[0], axis = 1).tolist()
attributes: # extra network attributes
  kind: CNN # the kind of neural network (CNN, RNN, ...)
  training_dataset: ImageNet # dataset used to for training
  manifest_author: Yen-Hsiang Chang
