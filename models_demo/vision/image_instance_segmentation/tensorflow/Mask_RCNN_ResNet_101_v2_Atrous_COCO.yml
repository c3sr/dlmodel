name: Mask_RCNN_ResNet_101_v2_Atrous_COCO
framework:
  name: TensorFlow
  version: 1.14.0
version: 1.0
description: >
  TensorFlow Instance Segmentation model, which is trained on the COCO (Common Objects in Context) dataset.
  Use mask_rcnn_resnet101_atrous_coco_2018_01_28 from TensorFlow detection model zoo.
references:
  - https://github.com/tensorflow/models/blob/master/research/object_detection
license: Apache License, Version 2.0
modality: image_instance_segmentation
inputs:
  - type: image
    description: the input image
    parameters:
      element_type: uint8
      input_layer: image_tensor
      layout: HWC
      color_mode: RGB
outputs:
  - type: classes
    description: classes
    parameters:
      element_type: float32
      output_layer: detection_classes
  - type: scores
    description: scores
    parameters:
      element_type: float32
      output_layer: detection_scores
  - type: boundingboxes
    description: boundingboxes
    parameters:
      element_type: float32
      output_layer: detection_boxes
  - type: masks
    description: masks
    parameters:
      element_type: float32
      output_layer: detection_masks
model:
  is_archive:
    false
  graph_path: https://s3.amazonaws.com/store.carml.org/models/tensorflow/models/mask_rcnn_resnet101_atrous_coco_2018_01_28/frozen_inference_graph.pb
  graph_checksum: 0800f8fc9c40fd8a9caf89d608df5ae9
  features_path: https://s3.amazonaws.com/store.carml.org/synsets/coco/coco_labels_paper_background.txt
  features_checksum: 17249a4106513972e03c00728e7cd380
preprocess: |
  import numpy as np
  import cv2
  wlist, hlist = [], []
  def preprocess_image(img, dims=None, need_transpose=False):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = np.asarray(img, dtype='uint8')
    wlist.append(img.shape[1])
    hlist.append(img.shape[0])
    if need_transpose:
      img = img.transpose([2, 0, 1])
    return img
  def preprocess(ctx, data):
    img = cv2.imread(dataset[int(data)])
    return preprocess_image(img)
postprocess: |
  import numpy as np
  import cv2
  def postprocess(ctx, data):
    masks, labels = [], [0]
    n = len(data[0])
    for i in range(n):
      h, w = hlist[-(n - i)], wlist[-(n - i)]
      cur_masks = np.zeros((h, w))
      for j in range(len(data[0][i])):
        prob, label, box, mask = data[1][i][j], data[0][i][j], data[2][i][j].tolist(), data[3][i][j]
        if prob > 0.7:
          labels.append(label)
          ymin, xmin, ymax, xmax = int(box[0] * h), int(box[1] * w), int(box[2] * h), int(box[3] * w)
          ymin = max(ymin, 0)
          xmin = max(xmin, 0)
          ymax = min(ymax, h)
          xmax = min(xmax, w)
          mask = cv2.resize(mask, (xmax - xmin, ymax - ymin)).tolist()
          for y in range(ymax - ymin):
            for x in range(xmax - xmin):
              if mask[y][x] > 0.5 and cur_masks[y + ymin][x + xmin] == 0:
                cur_masks[y + ymin][x + xmin] = len(labels) - 1
      masks.append(cur_masks.tolist())
    return masks, labels
attributes:
  kind: CNN
  training_dataset: COCO
  manifest_author: Yen-Hsiang Chang
