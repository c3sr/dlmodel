name: MLCommons_SSD_MobileNet_300x300
framework:
  name: Onnxruntime
  version: 1.7.1
version: 1.0
description: >
  MLCommons_SSD_MobileNet_300x300.
references:
  - https://github.com/mlperf/inference/tree/master/v0.5/classification_and_detection
  - https://github.com/mlcommons/inference/blob/master/vision/classification_and_detection/tools/convert-to-onnx.sh
license: Apache License, Version 2.0
modality: image_object_detection
inputs:
  - type: image
    description: the input image
    parameters:
      element_type: uint8
      input_layer: 0
      layout: HWC
      color_mode: RGB
      dimensions: [3, 300, 300]
outputs:
  - type: boundingboxes
    description: boundingboxes
    parameters:
      element_type: float32
  - type: classes
    description: classes
    parameters:
      element_type: float32
  - type: scores
    description: scores
    parameters:
      element_type: float32
model:
  is_archive:
    false
  graph_path: https://s3.amazonaws.com/store.carml.org/models/onnxruntime/ssd_mobilenet_v1_coco_2018_01_28.onnx
  graph_checksum: f78c11efb00ee6e698de5fc61724074f
  features_path: https://s3.amazonaws.com/store.carml.org/synsets/coco/coco_labels_paper_background.txt
  features_checksum: 17249a4106513972e03c00728e7cd380
preprocess: |
  import numpy as np
  import cv2
  def maybe_resize(img, dims):
    img = np.array(img, dtype=np.float32)
    if len(img.shape) < 3 or img.shape[2] != 3:
      img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    if dims != None:
      im_height, im_width, _ = dims
      img = cv2.resize(img, (im_width, im_height), interpolation=cv2.INTER_LINEAR)
    return img
  def pre_process_coco_mobilenet(img, dims=None, need_transpose=False):
    img = maybe_resize(img, dims)
    img = np.asarray(img, dtype=np.uint8)
    if need_transpose:
      img = img.transpose([2, 0, 1])
    return img
  def preprocess(ctx, data):
    img = cv2.imread(dataset[int(data)])
    return pre_process_coco_mobilenet(img, [300, 300, 3], False)
postprocess: |
  def postprocess(ctx, data):
    n = len(data[0])
    probabilities = []
    classes = []
    boxes = []
    for i in range(n):
      probabilities.append([])
      classes.append([])
      boxes.append([])
      detection_boxes = data[1][i]
      detection_classes = data[3][i]
      scores = data[2][i]
      for detection in range(len(scores)):
        if scores[detection] >= 0.5:
          probabilities[-1].append(scores[detection])
          classes[-1].append(float(detection_classes[detection]))
          box = detection_boxes[detection]
          boxes[-1].append([box[0], box[1], box[2], box[3]])
    return probabilities, classes, boxes
attributes:
  kind: CNN
  training_dataset: COCO
  manifest_author: Yen-Hsiang Chang
