name: MLCommons_SSD_ResNet34_1200x1200
framework:
  name: TensorFlow
  version: 1.14.0
version: 1.0
description: >
  MLCommons_SSD_ResNet34_1200x1200.
references:
  - https://github.com/mlperf/inference/tree/master/v0.5/classification_and_detection
  - https://github.com/mlperf/inference/tree/master/others/cloud/single_stage_detector/tensorflow
license: Apache License, Version 2.0
modality: image_object_detection
inputs:
  - type: image
    description: the input image
    parameters:
      element_type: float32
      input_layer: image
      layout: HWC
      color_mode: RGB
      dimensions: [3, 1200, 1200]
      mean: [123.68, 116.78, 103.94]
outputs:
  - type: classes
    description: classes
    parameters:
      element_type: float32
      output_layer: detection_classes
  - type: scores
    description: scores
    parameters:
      element_type: float32
      output_layer: detection_scores
  - type: boundingboxes
    description: boundingboxes
    parameters:
      element_type: float32
      output_layer: detection_bboxes
model:
  is_archive:
    false
  graph_path: https://zenodo.org/record/3262269/files/ssd_resnet34_mAP_20.2.pb
  graph_checksum: 2831b0a188efbb32c5e3e0c6cb6cc770
  features_path: https://s3.amazonaws.com/store.carml.org/synsets/coco/coco_labels_2014_2017_background.txt
  features_checksum: e7103a997c945e0f87c49a03c9c56a1b
preprocess: |
  import numpy as np
  import cv2
  def maybe_resize(img, dims):
    img = np.array(img, dtype=np.float32)
    if len(img.shape) < 3 or img.shape[2] != 3:
      img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    if dims != None:
      im_height, im_width, _ = dims
      img = cv2.resize(img, (im_width, im_height), interpolation=cv2.INTER_LINEAR)
    return img
  def pre_process_coco_resnet34(img, dims=None, need_transpose=False):
    img = maybe_resize(img, dims)
    mean = np.array([123.68, 116.78, 103.94], dtype=np.float32)
    img = img - mean
    if need_transpose:
      img = img.transpose([2, 0, 1])
    return img
  def preprocess(ctx, data):
    img = cv2.imread(dataset[int(data)])
    return pre_process_coco_resnet34(img, [1200, 1200, 3], False)
postprocess: |
  def postprocess(ctx, data):
    probs, labels, boxes = [], [], []
    for i in range(len(data[0])):
      cur_probs, cur_labels, cur_boxes = [], [], []
      for j in range(len(data[0][i])):
        prob, label, box = data[1][i][j], data[0][i][j], data[2][i][j].tolist()
        cur_probs.append(prob)
        cur_labels.append(label)
        cur_boxes.append(box)
      probs.append(cur_probs)
      labels.append(cur_labels)
      boxes.append(cur_boxes)
    return probs, labels, boxes
attributes:
  kind: CNN
  training_dataset: COCO
  manifest_author: Yen-Hsiang Chang
