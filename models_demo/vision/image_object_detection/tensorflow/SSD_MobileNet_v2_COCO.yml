name: SSD_MobileNet_v2_COCO
framework:
  name: TensorFlow
  version: 1.14.0
version: 1.0
description: >
  TensorFlow Object Detection model, which is trained on the COCO (Common Objects in Context) dataset.
  Use ssd_mobilenet_v2_coco_2018_03_29 from TensorFlow detection model zoo.
references:
  - https://github.com/tensorflow/models/blob/master/research/object_detection
license: Apache License, Version 2.0
modality: image_object_detection
inputs:
  - type: image
    description: the input image
    parameters:
      element_type: uint8
      input_layer: image_tensor
      layout: HWC
      color_mode: RGB
outputs:
  - type: classes
    description: classes
    parameters:
      element_type: float32
      output_layer: detection_classes
  - type: scores
    description: scores
    parameters:
      element_type: float32
      output_layer: detection_scores
  - type: boundingboxes
    description: boundingboxes
    parameters:
      element_type: float32
      output_layer: detection_boxes
model:
  is_archive:
    false
  graph_path: https://s3.amazonaws.com/store.carml.org/models/tensorflow/models/ssd_mobilenet_v2_coco_2018_03_29/frozen_inference_graph.pb
  graph_checksum: 310fbd22691b984c709f2dbf6553f58e
  features_path: https://s3.amazonaws.com/store.carml.org/synsets/coco/coco_labels_paper_background.txt
  features_checksum: 17249a4106513972e03c00728e7cd380
preprocess: |
  import numpy as np
  import cv2
  def preprocess_image(img, dims=None, need_transpose=False):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = np.asarray(img, dtype='uint8')
    if need_transpose:
      img = img.transpose([2, 0, 1])
    return img
  def preprocess(ctx, data):
    img = cv2.imread(dataset[int(data)])
    return preprocess_image(img)
postprocess: |
  def postprocess(ctx, data):
    probs, labels, boxes = [], [], []
    for i in range(len(data[0])):
      cur_probs, cur_labels, cur_boxes = [], [], []
      for j in range(len(data[0][i])):
        prob, label, box = data[1][i][j], data[0][i][j], data[2][i][j].tolist()
        cur_probs.append(prob)
        cur_labels.append(label)
        cur_boxes.append(box)
      probs.append(cur_probs)
      labels.append(cur_labels)
      boxes.append(cur_boxes)
    return probs, labels, boxes
attributes:
  kind: CNN
  training_dataset: COCO
  manifest_author: Yen-Hsiang Chang
