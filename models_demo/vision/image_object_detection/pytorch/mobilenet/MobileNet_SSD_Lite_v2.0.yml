name: MobileNet_SSD_Lite_v2.0
framework:
  name: PyTorch
  version: 1.8.1
version: 1.0
description: >
  This model is a replication of the model described in the MobileNet publication. This model expects mini-batches of 3-channel RGB images of shape (3 x H x W), where H and W are expected to be at least 300. The images have to be loaded in to a range of [0, 255] and then normalized using mean = [127, 127, 127] and std = [128, 128, 128]
references:
  - https://github.com/qfgaohao/pytorch-ssd/blob/master/vision/nn/mobilenet.py
  - https://github.com/qfgaohao/pytorch-ssd/blob/master/vision/ssd/mobilenet_v2_ssd_lite.py
  - https://storage.googleapis.com/models-hao/mb2-ssd-lite-mp-0_686.pth
  - https://arxiv.org/pdf/1704.04861.pdf
license: MIT License
modality: image_object_detection
inputs:
  - type: image
    description: the input image
    parameters:
      element_type: float32
      input_layer: 0
      layout: CHW
      color_mode: RGB
      dimensions: [3, 300, 300]
      mean: [127, 127, 127]
      scale: 128
outputs:
  - type: scores
    description: scores
    parameters:
      element_type: float32
  - type: boundingboxes
    description: boundingboxes
    parameters:
      element_type: float32
model:
  is_archive:
    false
  graph_path: https://s3.amazonaws.com/store.carml.org/models/pytorch/mb2-ssd-lite.pt
  graph_checksum: 31107eb8bc8bdc40bd663f8bddce0ebb
  features_path: https://s3.amazonaws.com/store.carml.org/models/tensorflow/models/deeplabv3_mnv2_pascal_train_aug_2018_01_29/pascal-voc-classes.txt
  features_checksum: 9ce439bcfb44c304e49a0fe1ae398f69
preprocess: |
  from torchvision import transforms
  from PIL import Image
  preprocessor = transforms.Compose([
    transforms.Resize((300, 300)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
  ])
  def preprocess(ctx, data):
    img = Image.open(dataset[int(data)]).convert('RGB')
    return preprocessor(img).numpy()
postprocess: |
  import numpy as np
  def postprocess(ctx, data):
    n = len(data[0])
    probabilities = []
    classes = []
    boxes = []
    for i in range(n):
      probabilities.append([])
      classes.append([])
      boxes.append([])
      detection_boxes = data[1][i]
      detection_classes = np.argmax(data[0][i], axis = 1)
      scores = np.max(data[0][i], axis = 1)
      for detection in range(len(scores)):
        if scores[detection] < 0.9 or detection_classes[detection] == 0:
          continue
        probabilities[-1].append(scores[detection])
        classes[-1].append(detection_classes[detection])
        box = detection_boxes[detection]
        boxes[-1].append([box[1], box[0], box[3], box[2]])
    return probabilities, classes, boxes
attributes:
  kind: CNN
  training_dataset: ImageNet
  manifest_author: Yen-Hsiang Chang
