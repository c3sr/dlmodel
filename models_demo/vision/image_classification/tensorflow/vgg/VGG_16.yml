name: VGG_16
framework:
  name: TensorFlow
  version: 1.14.0
version: 1.0
description: >
  This model is from TensorFlow Models Slim.
references:
  - https://arxiv.org/pdf/1409.1556.pdf
  - https://github.com/tensorflow/models/tree/master/research/slim
license: Apache License, Version 2.0
modality: image_classification
inputs:
  - type: image
    description: the input image
    parameters:
      element_type: float32
      input_layer: input
      layout: HWC
      color_mode: RGB
      dimensions: [3, 224, 224]
      mean: [123.68, 116.78, 103.94]
outputs:
  - type: classification
    description: the probability
    parameters:
      element_type: float32
      output_layer: vgg_16/fc8/squeezed
model:
  is_archive:
    false
  graph_path: https://s3.amazonaws.com/store.carml.org/models/tensorflow/graphs/vgg_16_frozen.pb
  graph_checksum: b44e96ab732a819710c74ec2462659ac
  features_path: http://s3.amazonaws.com/store.carml.org/synsets/imagenet/synset.txt
  features_checksum: 4d234b5833aca44928065a180db3016a
preprocess: |
  import numpy as np
  import cv2
  def center_crop(img, out_height, out_width):
    height, width, _ = img.shape
    left = int((width - out_width) / 2)
    right = int((width + out_width) / 2)
    top = int((height - out_height) / 2)
    bottom = int((height + out_height) / 2)
    img = img[top:bottom, left:right]
    return img
  def resize_with_aspectratio(img, out_height, out_width, scale=87.5, inter_pol=cv2.INTER_LINEAR):
    height, width, _ = img.shape
    new_height = int(100. * out_height / scale)
    new_width = int(100. * out_width / scale)
    if height > width:
      w = new_width
      h = int(new_height * height / width)
    else:
      h = new_height
      w = int(new_width * width / height)
    img = cv2.resize(img, (w, h), interpolation=inter_pol)
    return img
  def preprocess_image(img, dims=None, need_transpose=False):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    output_height, output_width, _ = dims
    cv2_interpol = cv2.INTER_AREA
    img = resize_with_aspectratio(img, output_height, output_width, inter_pol=cv2_interpol)
    img = center_crop(img, output_height, output_width)
    img = np.asarray(img, dtype='float32')
    means = np.array([123.68, 116.78, 103.94])
    img -= means
    if need_transpose:
      img = img.transpose([2, 0, 1])
    return img
  def preprocess(ctx, data):
    img = cv2.imread(dataset[int(data)])
    return preprocess_image(img, [224, 224, 3], False)
postprocess: |
  from scipy.special import softmax
  def postprocess(ctx, data):
    return softmax(data[0], axis = 1).tolist()
attributes:
  kind: CNN
  training_dataset: ImageNet
  manifest_author: Yen-Hsiang Chang
