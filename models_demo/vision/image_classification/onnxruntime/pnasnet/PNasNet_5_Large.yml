name: PNasNet_5_Large
framework:
  name: Onnxruntime
  version: 1.7.1
version: 1.0
description: >
  The pre-trained model expects input in mini-batches of 3-channel RGB images of shape (3 x H x W), where H and W are expected to be 331. The images have to be loaded in to a range of [0, 1] and then normalized using mean = [0.5, 0.5, 0.5] and std = [0.5, 0.5, 0.5].
references:
  - https://github.com/Cadene/pretrained-models.pytorc
  - https://github.com/Cadene/pretrained-models.pytorch/blob/master/pretrainedmodels/models/nasnet.py
license: BSD 3-Clause License
modality: image_classification
inputs:
  - type: image
    description: the input image
    parameters:
      element_type: float32
      input_layer: 0
      layout: CHW
      color_mode: RGB
      dimensions: [3, 331, 331]
      mean: [127.5, 127.5, 127.5]
      scale: [127.5, 127.5, 127.5]
outputs:
  - type: classification
    description: the probability
    parameters:
      element_type: float32
model:
  is_archive:
    false
  graph_path: https://s3.amazonaws.com/store.carml.org/models/onnxruntime/pnasnet5large-imagenet.onnx
  graph_checksum: c652ab5d706bcf3bed98fc8d50b877d1
  features_path: http://s3.amazonaws.com/store.carml.org/synsets/imagenet/synset.txt
  features_checksum: 4d234b5833aca44928065a180db3016a
preprocess: |
  from torchvision import transforms
  from PIL import Image
  preprocessor = transforms.Compose([
    transforms.Resize((331, 331)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
  ])
  def preprocess(ctx, data):
    img = Image.open(dataset[int(data)]).convert('RGB')
    return preprocessor(img).numpy()
postprocess: |
  from scipy.special import softmax
  def postprocess(ctx, data):
    return softmax(data[0], axis = 1).tolist()
attributes:
  kind: CNN
  training_dataset: ImageNet
  manifest_author: Yen-Hsiang Chang
