name: AlexNet # name of your model
framework:
  name: MXNet # framework for the model
  version: 1.8.0 # framework version constraint
version: 1.0 # version information in semantic version format
description: >
  MXNet Image Classification model, which is trained on the ImageNet dataset. Use AlexNet from GluonCV model zoo.
references: # references to papers / websites / etc.. describing the model
  - https://gluon-cv.mxnet.io/model_zoo/classification.html
  - https://github.com/dmlc/gluon-cv/blob/master/scripts/classification/imagenet/verify_pretrained.py
# license of the model
license: Apache License 2.0
# inputs to the model
modality: image_classification
inputs:
  - type: image
    # description of the first input
    description: the input image
    parameters: # type parameters
      element_type: float32
      input_layer: data
      layout: CHW
      color_mode: RGB
      dimensions: [3, 224, 224]
      mean: [123.675, 116.280, 103.530] # [0.485, 0.456, 0.406] * 255
      scale: [58.395, 57.120, 57.375]   # [0.229, 0.224. 0.225] * 255
outputs:
  - type: classification
    description: the probability
    parameters:
      element_type: float32
model: # specifies model graph and weights resources
  is_archive:
    false # if set, then the base_url is a url to an archive
    # the graph_path and weights_path then denote the
    # file names of the graph and weights within the archive
  graph_path: http://s3.amazonaws.com/store.carml.org/models/mxnet/gluoncv/alexnet/model-symbol.json
  graph_checksum: 4abd57ec8863ff3e3e29ecd4ead43d1f
  weights_path: http://s3.amazonaws.com/store.carml.org/models/mxnet/gluoncv/alexnet/model-0000.params
  weights_checksum: 906234b2a6b14bedac2dcccba8178529
  features_path: http://s3.amazonaws.com/store.carml.org/synsets/imagenet/synset.txt
  features_checksum: 4d234b5833aca44928065a180db3016a
preprocess: |
  from torchvision import transforms
  from PIL import Image
  preprocessor = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
  ])
  def preprocess(ctx, data):
    img = Image.open(dataset[int(data)]).convert('RGB')
    return preprocessor(img).numpy()
postprocess: |
  from scipy.special import softmax
  def postprocess(ctx, data):
    return softmax(data[0], axis = 1).tolist()
attributes: # extra network attributes
  kind: CNN # the kind of neural network (CNN, RNN, ...)
  training_dataset: ImageNet # dataset used to for training
  manifest_author: Yen-Hsiang Chang
